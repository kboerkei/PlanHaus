import { storage } from "../storage";
import { logError, logInfo } from "./logger";

// Configuration constants
const DEFAULT_WEDDING_CONFIG = {
  BUDGET: 25000,
  GUEST_COUNT: 100,
  DAYS_FROM_NOW: 365,
  PROJECT_NAME: "My Wedding"
} as const;

// Input validation helpers
function validateUserId(userId: number): asserts userId is number {
  if (!Number.isInteger(userId) || userId <= 0) {
    throw new Error('Invalid user ID provided');
  }
}

function validateProjectId(projectId: string | number): number {
  const numericId = Number(projectId);
  if (!Number.isInteger(numericId) || numericId <= 0) {
    throw new Error('Invalid project ID provided');
  }
  return numericId;
}

export async function getOrCreateDefaultProject(userId: number) {
  try {
    validateUserId(userId);
    
    // Get user's projects
    const projects = await storage.getWeddingProjectsByUserId(userId);
    
    if (projects.length > 0) {
      logInfo('projects', `Returning existing project for user ${userId}`);
      return projects[0]; // Return first project
    }
    
    // Create default project if none exists
    logInfo('projects', `Creating default project for user ${userId}`);
    
    const defaultDate = new Date();
    defaultDate.setDate(defaultDate.getDate() + DEFAULT_WEDDING_CONFIG.DAYS_FROM_NOW);
    
    const defaultProject = await storage.createWeddingProject({
      name: DEFAULT_WEDDING_CONFIG.PROJECT_NAME,
      createdBy: userId,
      date: defaultDate,
      venue: null,
      budget: DEFAULT_WEDDING_CONFIG.BUDGET,
      guestCount: DEFAULT_WEDDING_CONFIG.GUEST_COUNT,
      theme: null
    });
    
    logInfo('projects', `Created default project ${defaultProject.id} for user ${userId}`);
    return defaultProject;
    
  } catch (error) {
    logError('projects', error, { userId, function: 'getOrCreateDefaultProject' });
    throw error;
  }
}

export async function ensureProjectAccess(userId: number, projectId: string | number) {
  try {
    validateUserId(userId);
    const numericProjectId = validateProjectId(projectId);
    
    // More efficient: get specific project with access check in one query
    const project = await storage.getProjectByIdAndUserId(numericProjectId, userId);
    
    if (!project) {
      const error = new Error(`Project ${numericProjectId} not found or access denied for user ${userId}`);
      error.name = 'ProjectAccessError';
      throw error;
    }
    
    logInfo('projects', `Access granted to project ${numericProjectId} for user ${userId}`);
    return project;
    
  } catch (error) {
    logError('projects', error, { 
      userId, 
      projectId, 
      function: 'ensureProjectAccess' 
    });
    throw error;
  }
}

// Additional helper function for better project management
export async function getUserProjectsWithPagination(
  userId: number, 
  limit: number = 10, 
  offset: number = 0
) {
  try {
    validateUserId(userId);
    
    if (limit <= 0 || limit > 100) {
      throw new Error('Limit must be between 1 and 100');
    }
    
    if (offset < 0) {
      throw new Error('Offset must be non-negative');
    }
    
    const projects = await storage.getUserProjectsPaginated(userId, limit, offset);
    const totalCount = await storage.getUserProjectsCount(userId);
    
    return {
      projects,
      totalCount,
      hasMore: offset + limit < totalCount
    };
    
  } catch (error) {
    logError('projects', error, { userId, limit, offset });
    throw error;
  }
}